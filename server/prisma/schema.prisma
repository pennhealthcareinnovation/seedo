generator client {
  provider = "prisma-client-js"
  binaryTargets = ["debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model programs {
  id        Int        @id @default(autoincrement())
  medhubProgramId String     @unique() @db.VarChar(255)
  name      String     @db.VarChar(255)
  data      Json
  createdAt DateTime   @db.Timestamptz(6) @default(now())
  updatedAt DateTime   @db.Timestamptz(6) @updatedAt
  trainees  trainees[]
  tasks tasks[]
  procedureTypes procedureTypes[]
}

model procedureTypes {
  id                    Int         @id @default(autoincrement())
  programId             Int
  medhubProcedureTypeId String      @db.VarChar(255) @unique()
  name                  String      @db.VarChar(255)
  data                  Json?

  createdAt             DateTime    @db.Timestamptz(6) @default(now())
  updatedAt             DateTime    @db.Timestamptz(6) @updatedAt

  program               programs    @relation(fields: [programId], references: [id])
  tasks                 tasks[]
}

model trainees {
  id              Int      @id @default(autoincrement())
  programId       Int
  medhubUserId    String   @unique() @db.VarChar(255)
  pennId          String   @unique() @db.VarChar(255)
  lastName        String?  @db.VarChar(255)
  firstName       String?  @db.VarChar(255)
  data            Json?
  createdAt       DateTime @db.Timestamptz(6) @default(now())
  updatedAt       DateTime @db.Timestamptz(6) @updatedAt
  
  programs        programs @relation(fields: [programId], references: [id])
  observations    observations[]
  ehrMetadata     traineesEhrMetadata?
}

model traineesEhrMetadata {
  id              Int       @id @default(autoincrement())
  traineeId       Int
  data            Json?
  trainee         trainees  @relation(fields: [traineeId], references: [id])
}

model observations {
  id              Int       @id @default(autoincrement())
  traineeId       Int
  
  // The task that created this observation
  taskId          Int

  // A unique EHR identifier for this event (i.e. CSN, accession, note id, procedure identifier, etc.)
  ehrObservationId     String   @db.VarChar(18)
  ehrObservationIdType String @db.VarChar(18)

  // Date of the observation/event
  observationDate    DateTime  @db.Timestamptz(6)

  // Patient-level metadata
  patientId          String   @db.VarChar(18)
  patientIdType      String   @db.VarChar(18)
  patientName        String   @db.VarChar(255)
  patientBirthDate   DateTime
  
  // Catch all for other data
  data            Json?

  // Metadata for sync to medhub
  syncId          String?   @unique() @db.VarChar(255)
  syncedAt        DateTime? @db.Timestamptz(6)

  createdAt       DateTime @db.Timestamptz(6) @default(now())
  updatedAt       DateTime @db.Timestamptz(6) @updatedAt
  
  trainee         trainees  @relation(fields: [traineeId], references: [id])
  task            tasks     @relation(fields: [taskId], references: [id])

  @@unique([traineeId, ehrObservationId, ehrObservationIdType])
}

model tasks {
  id                  Int       @id @default(autoincrement())
  programId           Int
  procedureTypeId     Int
  observableType      String    @db.VarChar(255)
  args                Json?

  program             programs  @relation(fields: [programId], references: [id])
  procedureType       procedureTypes @relation(fields: [procedureTypeId], references: [id])
  observations        observations[]
}

model sentEmails {
  id                  Int       @id @default(autoincrement())
  
  // What initiated the email send? (i.e. task id)
  initiatorType          String?
  initiatorId            Int?

  to                  String
  subject             String
  email               Json

  createdAt       DateTime @db.Timestamptz(6) @default(now())
  updatedAt       DateTime @db.Timestamptz(6) @updatedAt
}