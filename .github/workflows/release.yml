name: 'Build & Deploy'

on:
  release:
    types:
    - published
  push:
    branches:
      - dev

permissions:
  id-token: write
  contents: read

env:
  REGISTRY: uphschcich.azurecr.io

jobs:
  build_server:
    name: Build Server
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout repo'
        uses: actions/checkout@main
        with:
          # NOTE: this deploy key strategy will only with a single private submodule repo.
          # The ideal solution is to use a service/machine account with a PAT: https://github.com/actions/checkout/issues/287
          submodules: recursive
          ssh-key: ${{ secrets.OBSERVABLES_DEPLOY_KEY }}


      - name: Extract Branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
               
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Log into container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/seedo-server
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=long
            type=semver,pattern={{raw}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          file: ./server/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/seedo-server-cache:${{ steps.extract_branch.outputs.branch }}
          cache-to: type=registry,ref=${{ env.REGISTRY }}/seedo-server-cache:${{ steps.extract_branch.outputs.branch }},mode=max

  build_web:
    name: Build Web
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout repo'
        uses: actions/checkout@main
        with:
          # NOTE: this deploy key strategy will only with a single private submodule repo.
          # The ideal solution is to use a service/machine account with a PAT: https://github.com/actions/checkout/issues/287
          submodules: recursive
          ssh-key: ${{ secrets.OBSERVABLES_DEPLOY_KEY }}


      - name: Extract Branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
               
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Log into container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/seedo-web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=long
            type=semver,pattern={{raw}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          file: ./web/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/seedo-web-cache:${{ steps.extract_branch.outputs.branch }}
          cache-to: type=registry,ref=${{ env.REGISTRY }}/seedo-web-cache:${{ steps.extract_branch.outputs.branch }},mode=max

  build_function:
    name: Build Function
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout repo'
        uses: actions/checkout@main
        with:
          # NOTE: this deploy key strategy will only with a single private submodule repo.
          # The ideal solution is to use a service/machine account with a PAT: https://github.com/actions/checkout/issues/287
          submodules: recursive
          ssh-key: ${{ secrets.OBSERVABLES_DEPLOY_KEY }}


      - name: Extract Branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
               
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Log into container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/seedo-function-deploy
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=long
            type=semver,pattern={{raw}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          file: ./function/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/seedo-function-deploy-cache:${{ steps.extract_branch.outputs.branch }}
          cache-to: type=registry,ref=${{ env.REGISTRY }}/seedo-function-deploy-cache:${{ steps.extract_branch.outputs.branch }},mode=max

  deploy_dev:
    name: Deploy (Dev)
    needs: [ build_function, build_server, build_web ]
    runs-on: [ self-hosted, jump ]
    
    if: github.ref == 'refs/heads/dev'
    environment: development

    # NOTE: Docker must be installed on the runner
    container:
      image: uphschcich.azurecr.io/seedo-function-deploy:dev
      credentials:
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}
      env:
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        AZURE_FUNCTION_APP_NAME: use2-chci-ch-seedo-dev-function
        AZURE_APP_SERVICE_NAME: use2-chci-ch-seedo-dev-server
        WEB_PORT: 3000
        SERVER_PORT: 3001
        IMAGE_TAG: dev

    steps:
      - name: Deploy function app
        shell: bash
        run: /root/deploy.sh

  deploy_prod:
    name: Deploy (Prod)
    needs: [ build_function, build_server, build_web ]
    runs-on: [ self-hosted, jump ]
    
    if: github.event.release.target_commitish == 'main' # only on main branch releases
    environment: production

    # NOTE: Docker must be installed on the runner
    container:
      image: uphschcich.azurecr.io/seedo-function-deploy:latest
      credentials:
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}
      env:
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
        AZURE_FUNCTION_APP_NAME: use2-chci-ch-seedo-prod-function
        AZURE_APP_SERVICE_NAME: use2-chci-ch-seedo-prod-server
        WEB_PORT: 3000
        SERVER_PORT: 3001
        IMAGE_TAG: latest

    steps:
      - name: Deploy function app
        shell: bash
        run: /root/deploy.sh
